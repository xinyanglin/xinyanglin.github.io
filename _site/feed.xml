<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>述昧评生</title>
    <description>这里是林昕阳的博客。我会在这儿记录生活与工作。| 关于产品，代码，生活</description>
    <link>http://linxy.me/</link>
    <atom:link href="http://linxy.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 06 Dec 2015 15:24:53 +0800</pubDate>
    <lastBuildDate>Sun, 06 Dec 2015 15:24:53 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>近期设计后台的心得</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;怎么设计后台？第一步，梳理清楚业务流程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在刚开始加入现在的团队时，就接到了第一个任务－－根据已有的业务和低保真原型，梳理出一份新的，可供开发人员查阅的需求文档。在对证券行业未熟悉的情况下，要去接触一个金融后台，确实遇到了不少的困难。以下便是近段时间接触后台设计以来的一些想法。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;用大于看&lt;/h2&gt;
&lt;p&gt;初步接触后台设计时，百度与知乎上面有许多关于后台设计的看法，万变不离其中的就是［梳理业务逻辑］。拿到手的需求，需要一步步转化，翻译成为一个个界面的排版，按钮位置，以及跳转。对于界面设计没有很高要求的后台系统而言，个人认为这一步是非常重要的，至少在原型这一步，就要让后台能让普通人能够以较低的学习成本进行使用。同时，这也能节省一定的设计成本－－即便没有UI，每个人也都能使用。&lt;/p&gt;

&lt;p&gt;许多产品设计文章都提到：后台要在界面上花些功夫，毕竟也是人在用。好看的界面当然会让人用得清爽，但其实实际状况是：如果是公司自己人使用的后台，那么开发团队不会投入太多地成本在界面上。除非这个后台是给外部的人使用，如微信公众平台。&lt;/p&gt;

&lt;p&gt;同时，好看的界面并没有那么重要。老大一再和我强调：在进行产品设计的时候，要将注意力控制在业务流程上，至于界面能否好看，会有比我更为专业的人进行处理。如果业务流程不顺畅，逻辑不清晰，那么再好看的界面也是坑用户。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;思维的切入点&lt;/h2&gt;
&lt;p&gt;梳理业务逻辑根据思考的切入点，也有不同的方法。&lt;br /&gt;
第一种：罗列法。根据后台的业务需求，或者功能模块以结构图的形式罗列出来。如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/解构法.png&quot; alt=&quot;有帮助的截图&quot; /&gt;&lt;br /&gt;
（图来源于知乎）&lt;/p&gt;

&lt;p&gt;这样做的好处是，整体的结构会非常清晰，可以看到哪一个模块包含了多少个模块，以及它们的从属关系。但缺点也非常明显：每个模块间毫无联系，根本就没有将人的使用流程考虑进去。这种简单粗暴的办法不太适合复杂的后台。&lt;/p&gt;

&lt;p&gt;第二种：流程法。与结构法的简单粗暴不同，流程法不以“功能”为核心考虑，而是以“流程”为主。即是以“事件“为线索来描述功能。如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/流程法.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;br /&gt;
（图来源于知乎）&lt;br /&gt;
我们可以看到图中将酒店的预定系统根据［申请］，［预定］等不同的事件作为连接线索。这种做法的好处是扩大了思考的维度，将人的操作路径与业务流程紧密地结合起来，以此设计出的后台才是高可用性，并且完整的。而坏处，我想是结构图的表达和组成更为复杂，需要多张图示说明问题。&lt;/p&gt;

&lt;p&gt;举设计中一个小小的实例：&lt;br /&gt;
我们的后台是通过RCAB模型来管理使用帐号的。即账号－－角色－－权限三者间的相互关系，组成一个可用的账号。&lt;/p&gt;

&lt;p&gt;如果是基于第一种方法的构建，我们很容易将后台账号模块分解为三个小模块：账号管理，角色管理，权限管理。每个模块间均有管理，与新建。可每个模块间的并没有连接起来。也就意味着，用户如果打算给一个账号新增权限，就必须先在权限模块新建一个权限，再跑到账号模块中将权限绑定。而这其中就得跳转多个界面了。&lt;/p&gt;

&lt;p&gt;如果是基于第二种方法去构建，我们很快就能找到解决方案。只需要将用户使用后台账号各个业务流程列举出来，我们就能发现，只要在新建账号权限的下一步增加多一个绑定账号的选择框，就能解决跳转多个界面的问题。&lt;/p&gt;

&lt;p&gt;以上仅仅是一个细小的细节变化，但我们可以通过此得知：使用流程法去构建功能，会让我们考虑到更多的情况。也让我们设计出来的产品更符合实际的操作习惯。更多关于这种方法的说明，可以查看&lt;a href=&quot;http://www.zhihu.com/question/31859504&quot;&gt;此条链接&lt;/a&gt;，相信看完会有很多的启发。其中文中提到的“穷尽不重复”的思维办法，也是一个很有趣的东西。在以后我会尝试说明下。&lt;/p&gt;

&lt;p&gt;“流程法”同样适用于其他产品的设计，个人认为这是有效提高用户体验，以及分析用户使用场景时的法宝。从本质上而言，流程法更像是站在产品全局的角度考虑问题，将功能回归成为一段段用户的行为路径。&lt;/p&gt;

&lt;p&gt;当然，这种方法并不在任何地方都适用。有时仅仅考虑流程，可能会导致功能上的重复，或者逻辑不清晰。&lt;/p&gt;

&lt;h2 id=&quot;pk&quot;&gt;逻辑与线性的PK&lt;/h2&gt;

&lt;p&gt;在一篇疑似产品鸡汤的“&lt;a href=&quot;http://www.360doc.com/content/15/0817/16/20720847_492329626.shtml&quot;&gt;微信产品原则&lt;/a&gt;”一文中称“在逻辑原理和线性原则相冲突的时候，优先线性原则”。我的理解是，逻辑原理就是人意识中的分类：这是模块A，这是模块B，它们之间是并行，从属等关系。而线性原则则是人在实际操作中的使用习惯：我要达到目标C，必须使用模块A然后再模块B；或者，我是角色C，我可以使用模块A和模块C，而其他人不可以。可以笼统地认为，“线性原则”是以结果为导向的。不违背线性，就是尽可能能地不打断用户的操作。&lt;/p&gt;

&lt;p&gt;在实际工作中，我也遇上了这样的问题：我们要让一条客户的申请记录进行两次审核，而这两个角色都是在同一个面板中进行操作。&lt;/p&gt;

&lt;p&gt;从上述内容我们可以得知：有两种使用角色。因此对应的客户申请记录的生命周期就变为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/用大于看_-_马克飞象_-_专为印象笔记打造的Markdown编辑器.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在设计的时候，我根据角色的使用流程将表单进行了分层。所有的审核纪录被归为［初审］［复审］两种状态。初审中有［需要初审的申请］［被驳回的申请］，而复审中只有［复审的申请］。客服只看他需要处理的审核，而经理只看他需要处理的审核。我也懒得找回原形截图了（喂！），姑且使用文字描述下。&lt;/p&gt;

&lt;p&gt;经理在进入后默认选中［复审］一栏。这里只出现他需要审核的表单。但他需要查看手下人正在审核的表单时，可以点击［初审］进入表单，但不能审核。而客服进入此功能时，默认选中［初审］一栏。而无法查看［复审］一栏。&lt;br /&gt;
因为对于经理而言，唯一需要care的就只有需要他复审的申请记录，而不需要关注审核的生命周期。相反，客服就需要看到驳回的申请（无论是初审驳回或者复审驳回的申请），因为他需要向申请人解释为什么申请不通过。&lt;/p&gt;

&lt;p&gt;简而言之：就是相关人只关注他相关的事。这样的设计能保证用户在操作过程中更专注于他的任务，不容易被打断，尊崇线性原则。&lt;/p&gt;

&lt;p&gt;但是在老大看过之后，觉得操作逻辑有些紊乱，因此他建议以审核记录的生命周期为基础，在同一张表单中去完成操作。也就是所有的审核记录按［初审］［复审］［审核不通过］的分类方式，无论什么样的角色进入后都可以自由查看。而这样的设计，也让表单看起来更有逻辑性，功能一目了然，也符合大部分用户目前的操作认知。&lt;/p&gt;

&lt;p&gt;逻辑原则与线性原则冲突在产品设计中经常也会遇见，也是目前一直困惑我的一点，希望通过以后的工作可以获得更多的见解。&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Nov 2015 22:09:00 +0800</pubDate>
        <link>http://linxy.me/2015/11/08/designbackstage/</link>
        <guid isPermaLink="true">http://linxy.me/2015/11/08/designbackstage/</guid>
        
        <category>Work</category>
        
        
      </item>
    
      <item>
        <title>开始旅程</title>
        <description>&lt;pre&gt;&lt;code&gt;没想到最终还是以这种形式开启了博客之旅。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从10月中旬听了前辈说一定要自己写博客，到学习git，部署jekyll，购买域名，熟悉编撰语法，到现在博客看起来还是荒芜之地，用了整整过了一个半月的时间才做出这个半成品。好在2015入冬一直失败，我至少在“凛冬”之前上线了。&lt;/p&gt;

&lt;p&gt;让一个毫无代码基础的人学习建立自己的博客可是一件不容易的事，好在我多少有些极客情怀。博客的搭建使用了&lt;a href=&quot;http://huangxuan.me/&quot;&gt;Hux&lt;/a&gt;的博客模版，来源Jekyll，使用Markdown编辑。同时感谢很棒的前端工程师&lt;a href=&quot;http://loyalsoldier.me/&quot;&gt;刘炜贤&lt;/a&gt;的指导，为了不辜负这位水瓶男难得的&lt;strong&gt;热情&lt;/strong&gt;，上线后我会不定期地，尽量地，进行迭代，嗯。&lt;/p&gt;

&lt;p&gt;关于名字，我将我的博客命名为诉眛评生这个独(zhuāng)特(bī)的名字，是希望自己能坚持将生活中，工作中的一切想法记录阐述出来。昧有“未知”的意思。因此博客名字就是“阐自己的未知以求解，评论自己的人生以获益”，正所谓没有装过逼的人生是无趣的。而在自己亲手搭建的博客中偷偷地装逼，就像在家里独自完成10000块拼图一样非常有成就感。&lt;/p&gt;

&lt;p&gt;一直以来曾试着在各种平台写写东西，无奈自己是一个很忙（lǎn）的人。写文章对于我而言，并没有太大的含义，只不过当脑海中有些想法的时候，总想将其隆重些供奉在某一个地方，而不是草草地写在纸中了事。而很久没有写完整文章的我，也开始觉得对文字有些生疏了，多写写文章不是坏事。所以，建立博客，装着逼就能进步，何乐而不为。&lt;/p&gt;

&lt;p&gt;我将用文字，照片等形式，记录我在做产品经理时的所做所想，以及在生活中遇到的点点滴滴。也欢迎与我一样都是产品人的同伴与我一起讨论。希望我们的坚持能终有一天有所收获。&lt;/p&gt;

&lt;p&gt;欢迎来看我的拼图游戏。我叫林昕阳。产品人，文科极客，一个热爱跑偏与折腾的人。&lt;/p&gt;

&lt;p&gt;—— Linxy&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Nov 2015 22:09:00 +0800</pubDate>
        <link>http://linxy.me/2015/11/08/hello-blog/</link>
        <guid isPermaLink="true">http://linxy.me/2015/11/08/hello-blog/</guid>
        
        <category>Life</category>
        
        
      </item>
    
  </channel>
</rss>
